{"version":3,"file":"extension.js","mappings":"uuBAEA,oBAAyBA,GACrB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,8BAA8BC,UAC3E,MAAMC,EAASJ,EAAOK,OAAOC,iBAC7B,IAAKF,EAED,YADAJ,EAAOK,OAAOE,uBAAuB,0BAIzC,MAAMC,EAAWJ,EAAOI,SAClBC,EAAOD,EAASE,UAChBC,EAqBd,SAAmCF,GAG/B,OAFcA,EAAKG,MAAM,MACFC,QAAOC,IAASA,EAAKC,OAAOC,WAAW,kBAC9CC,KAAK,KACzB,CAzBwBC,CAA0BT,GAE1C,GAAIE,IAAYF,EAAM,CAClB,MAAMU,EAAY,IAAInB,EAAOoB,MACzBZ,EAASa,WAAW,GACpBb,EAASa,WAAWZ,EAAKa,eAGvBlB,EAAOmB,MAAKC,IACdA,EAAYC,QAAQN,EAAWR,EAAQ,IAG3CX,EAAOK,OAAOE,uBAAuB,qCACzC,MACIP,EAAOK,OAAOE,uBAAuB,6CACzC,IAGJT,EAAQ4B,cAAcC,KAAK5B,EAC/B,EAQA,wBAA8B,EAvC9B,iB,UCAA6B,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://cleanup/./src/extension.ts","webpack://cleanup/external commonjs \"vscode\"","webpack://cleanup/webpack/bootstrap","webpack://cleanup/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('console-log-remover.remove', async () => {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            vscode.window.showInformationMessage('No active editor found');\n            return;\n        }\n\n        const document = editor.document;\n        const text = document.getText();\n        const newText = removeConsoleLogsFromText(text);\n\n        if (newText !== text) {\n            const fullRange = new vscode.Range(\n                document.positionAt(0),\n                document.positionAt(text.length)\n            );\n\n            await editor.edit(editBuilder => {\n                editBuilder.replace(fullRange, newText);\n            });\n\n            vscode.window.showInformationMessage('Console logs removed successfully!');\n        } else {\n            vscode.window.showInformationMessage('No console logs found in the current file.');\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction removeConsoleLogsFromText(text: string): string {\n    const lines = text.split('\\n');\n    const newLines = lines.filter(line => !line.trim().startsWith('console.log('));\n    return newLines.join('\\n');\n}\n\nexport function deactivate() {}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","disposable","vscode","commands","registerCommand","async","editor","window","activeTextEditor","showInformationMessage","document","text","getText","newText","split","filter","line","trim","startsWith","join","removeConsoleLogsFromText","fullRange","Range","positionAt","length","edit","editBuilder","replace","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}